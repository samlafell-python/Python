# Data Preprocessing Template

# Importing the libraries
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

# Importing the dataset
dataset = pd.read_csv('50_Startups.csv')
x = dataset.iloc[:, :-1].values
y = dataset.iloc[:, 4].values

#dataset
#x
#y

# Encoding Categorical Data
# Encoding the Independent Variable
from sklearn.preprocessing import LabelEncoder, OneHotEncoder
label_encoder_x = LabelEncoder()
x[:, 3] = label_encoder_x.fit_transform(x[:, 3])
one_hot_encoder = OneHotEncoder(categorical_features = [3])
x = one_hot_encoder.fit_transform(x).toarray()

# Avoiding the Dummy Variable Trap
x = x[:, 1:]

# Splitting the dataset into the Training set and Test set
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.20, random_state = 0)

# Feature Scaling
# We don't need to do this here becacuse the library will take care of it for us manually
"""from sklearn.preprocessing import StandardScaler
sc_X = StandardScaler()
X_train = sc_X.fit_transform(X_train)
X_test = sc_X.transform(X_test)
sc_y = StandardScaler()
y_train = sc_y.fit_transform(y_train)"""

# Fitting MLR to the Training Set
from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(x_train, y_train)

# Predicting the Test Set Results
y_pred = regressor.predict(x_test)

y_pred

y_test

x

# Building the optimal model using Backward Elimination

# https://www.udemy.com/machinelearning/learn/v4/t/lecture/5789776?start=0
import statsmodels.formula.api as sm
x = np.append(arr = np.ones((50, 1)).astype(int), values = x, axis = 1)

# Fit the full model with all possible predictors
x_opt = x[:, [0, 1, 2, 3, 4, 5]]
regressor_OLS = sm.OLS(endog = y, exog = x_opt).fit()

# Consider the variable with the highest P-value, if this is above our alpha
# of 0.05, we remove it from the model
regressor_OLS.summary()

# So, we get rid of x2 which is index 2
# Fit the full model without that variable
x_opt = x[:, [0, 1, 3, 4, 5]]
regressor_OLS = sm.OLS(endog = y, exog = x_opt).fit()

# Consider the variable with the highest P-value, if this is above our alpha
# of 0.05, we remove it from the model
regressor_OLS.summary()

# So, we get rid of x1 which is index 1
# Fit the full model without that variable
x_opt = x[:, [0, 3, 4, 5]]
regressor_OLS = sm.OLS(endog = y, exog = x_opt).fit()

# Consider the variable with the highest P-value, if this is above our alpha
# of 0.05, we remove it from the model
regressor_OLS.summary()

# So, we get rid of x2 which is index 4
# Fit the full model without that variable
x_opt = x[:, [0, 3, 5]]
regressor_OLS = sm.OLS(endog = y, exog = x_opt).fit()

# Consider the variable with the highest P-value, if this is above our alpha
# of 0.05, we remove it from the model
regressor_OLS.summary()

# So, we get rid of x2 which is index 5
# Fit the full model without that variable
x_opt = x[:, [0, 3]]
regressor_OLS = sm.OLS(endog = y, exog = x_opt).fit()

# Consider the variable with the highest P-value, if this is above our alpha
# of 0.05, we remove it from the model
regressor_OLS.summary()

# OKAY. So, our R-Squared and Adj. R-squared both dropped when 
# I removed that predictor.
# So, even though it has a P-Value > Alpha
# I am going to reintroduce it to the model

x_opt = x[:, [0, 3, 5]]
regressor_OLS = sm.OLS(endog = y, exog = x_opt).fit()
regressor_OLS.summary()



# Backward Elimination with p-Value
import statsmodels.formula.api as sm
def backwardElimination(x, sl):
    numVars = len(x[0])
    for i in range(0, numVars):
        regressor_OLS = sm.OLS(y, x).fit()
        maxVar = max(regressor_OLS.pvalues).astype(float)
        if maxVar > sl:
            for j in range(0, numVars - i):
                if (regressor_OLS.pvalues[j].astype(float) == maxVar):
                    x = np.delete(x, j, 1)
    regressor_OLS.summary()
    return x
 
SL = 0.05
x_opt = x[:, [0, 1, 2, 3, 4]]
x_Modeled = backwardElimination(x_opt, SL)

# Backward Elmination with R-Sq
def backwardElimination(x, SL):
    numVars = len(x[0])
    temp = np.zeros((50,6)).astype(int)
    for i in range(0, numVars):
        regressor_OLS = sm.OLS(y, x).fit()
        maxVar = max(regressor_OLS.pvalues).astype(float)
        adjR_before = regressor_OLS.rsquared_adj.astype(float)
        if maxVar > SL:
            for j in range(0, numVars - i):
                if (regressor_OLS.pvalues[j].astype(float) == maxVar):
                    temp[:,j] = x[:, j]
                    x = np.delete(x, j, 1)
                    tmp_regressor = sm.OLS(y, x).fit()
                    adjR_after = tmp_regressor.rsquared_adj.astype(float)
                    if (adjR_before >= adjR_after):
                        x_rollback = np.hstack((x, temp[:,[0,j]]))
                        x_rollback = np.delete(x_rollback, j, 1)
                        print (regressor_OLS.summary())
                        return x_rollback
                    else:
                        continue
    regressor_OLS.summary()
    return x
 
SL = 0.05
x_opt = x[:, [0, 1, 2, 3, 4]]
x_Modeled = backwardElimination(x_opt, SL)
